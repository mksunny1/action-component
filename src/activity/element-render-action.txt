import { ActionObject } from "../../../action-object/dist/action-object.js";
import { ClassAction } from "../../../class-action/dist/class-action.js";
import { ActionComponent } from "../component/action-component.js";
import { ElementMemberAction, IElementMemberActionContext } from "./element-actions.js";

/**
 * An action that renders an element. This has been placed in its own module 
 * because of the extra complexity involved.
 * 
 */
export class ElementRenderAction extends ElementMemberAction {
    static ActionComponentType: typeof ActionComponent = ActionComponent;
    roots?: ActionObject[];
    constructor(roots: ActionObject[], element: Element, ...reactions: ClassAction<any>[]) {
        super(element, ...reactions);
        if (roots) this.roots = roots;;
    }
    
    doAction(context?: IElementMemberActionContext) {
        const ActionComponentType = (<typeof ElementRenderAction>this.constructor).ActionComponentType

        let value = context?.value;
        if (value === undefined) return;

        const element = this.element;
        const extraRoots = this.roots || [];
        const actionComponent = new ActionComponentType([value, ...extraRoots]);

        if (element instanceof HTMLTemplateElement) {
            const elements = [...element.content.children];
            for (let subElement of elements) {
                actionComponent.process(subElement).roots[0].act();
            }
            if (context) context.value = elements;
        } else {
            actionComponent.process(element).roots[0].act();
            if (context) context.value = element;
        }

        return actionComponent.key;
    }
}
